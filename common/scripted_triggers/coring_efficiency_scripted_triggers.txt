@MAX_CORING_COST = 250
coring_efficiency_trigger = {
	hidden_trigger = {
		set_temp_variable = { coring_cost_factor = 1 } #By default, cores at 100 percent efficiency

		# Generic Efficiency Modifiers

		if = {
			limit = { has_variable = coring_cost_targeted_state_factor@ROOT }
			add_to_temp_variable = { coring_cost_factor = coring_cost_targeted_state_factor@ROOT }
		}
		if = {
			limit = { has_variable = coring_cost_state_factor }
			add_to_temp_variable = { coring_cost_factor = coring_cost_state_factor }
		}
		if = {
			limit = { ROOT = { has_variable = coring_cost_country_factor } }
			add_to_temp_variable = { coring_cost_factor = ROOT.coring_cost_country_factor }
		}

		#Unique Efficiency Modifiers
		#Important thing to note: Use AND if the trigger is complex, then order it by the least expensive identifier first


		#Gui Stuff
		set_temp_variable = { coring_cost_factor_gui = coring_cost_factor }
		if = {
			limit = { check_variable = { coring_cost_factor_gui < 0 } }
			multiply_temp_variable = { coring_cost_factor_gui = -1 }
		}

		#Final Core Cost Factor Handling
		multiply_temp_variable = { coring_var_coring_cost = coring_cost_factor }
		round_temp_variable = coring_var_coring_cost
		
		#Get any increase to your maximum coring cost from modifiers
		set_temp_variable = { maximum_coring_cost = @MAX_CORING_COST }
		add_to_temp_variable = { maximum_coring_cost = ROOT.modifier@maxium_core_cost_increase }
		if = {
			limit = { check_variable = { maximum_coring_cost < 0 } }
			set_temp_variable = { maximum_coring_cost = 0 }
		}
		else_if = {
			limit = {
				check_variable = { maximum_coring_cost > 2000 }
			}
			set_temp_variable = { maximum_coring_cost = 2000 }
		}

		# Limit the cost to 0 and maximum_cost range.
		if = {
			limit = { check_variable = { coring_var_coring_cost < 0 } }
			set_temp_variable = { coring_var_coring_cost = 0 }
		}
		else_if = {
			limit = { check_variable = { coring_var_coring_cost > maximum_coring_cost } }
			set_temp_variable = { coring_var_coring_cost = maximum_coring_cost }
		}
	}
}
