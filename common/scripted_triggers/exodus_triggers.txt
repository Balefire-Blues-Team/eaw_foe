############################
##    Project EqExodus    ##
##      By HappyNTH       ##
############################

allow_exodus_from_THIS = { # Called in STATE SCOPE
	NOT = { has_global_flag = exodus_disabled } # Check for global off switch
	NOT = { has_state_flag = do_not_exodus } # Check for state-to-state off switch
	var:global.exodus_old_owner = { # Don't fire if the old owner is a subject of the new owner, because duh
		NOT = {
			is_subject_of = var:global.exodus_new_owner
		}
	}
	var:global.exodus_old_owner = {
		OR = {
			has_war_with = var:global.exodus_new_owner # Disable Exodus if it's a peaceful transfer
			has_capitulated = yes # OR has capitulated (i.e. post-Peace Conference reallocation but not an annex_nation)
		}
	}
}

precalculate_exodus_targets = {
	var:ROOT.exodus_old_owner = {
		all_of_scopes = { # Add controlled states of old owner to targets
			array = neighbors
			if = {
				limit = {
					NOT = {
						tag = var:PREV.exodus_new_owner
					}
				}
				add_to_temp_array = { exodus_valid_targets_temp = THIS.id }
			}
		}
	}
	var:ROOT.exodus_new_owner = {
		all_of_scopes = { # Add controlled states of old owner to targets
			array = neighbors
			if = {
				limit = {
					NOT = {
						tag = var:ROOT.exodus_old_owner
					}
				}
				add_to_temp_array = { exodus_valid_targets_temp = THIS.id }
			}
		}
	}
}

exodus_precalculate_nomadicity = { # Called in STATE SCOPE
	set_temp_variable = { nomadicity_temp = global.core_nomadicity }
	## Positive Factors
	## Negative Factors
	if = { # Multiply by 0.75 if the state has already suffered an exodus
		limit = { has_state_flag = has_had_exodus }
		multiply_temp_variable = { nomadicity_temp = 0.75 }
	}
	## Mixed / Generic Factors
	# Add modifier from old occupier's ideas etc
	set_temp_variable = { var = nomadicity_temp_mod value = ROOT.exodus_old_owner:modifier@exodus_nomadicity }
	multiply_temp_variable = { nomadicity_temp_mod = global.nomadicity_modifier_factor }
	clamp_temp_variable = { var = nomadicity_temp_mod min = -1 max = 1 }
	add_to_temp_variable = { var = nomadicity_temp value = nomadicity_temp_mod }
	clamp_temp_variable = { var = nomadicity_temp min = 0 }
}

exodus_precalculate_occupier_appeal = { # Called in STATE SCOPE
	set_temp_variable = { occupier_appeal_temp = global.core_occupier_modifier }
	## Positive Factors
	if = { # Add 0.15 if same ideology
		limit = { var:ROOT.exodus_new_owner = { var:ROOT.exodus_old_owner = { has_government = PREV } } }
		add_to_temp_variable = { occupier_appeal_temp = 0.15 }
	}
	if = { # Add pre-set value if new owner has a core
		limit = { var:ROOT.exodus_new_owner = { var:ROOT.exodus_target_state = { is_core_of = PREV } } }
		add_to_temp_variable = { occupier_appeal_temp = global.core_has_core }
	}
	## Negative Factors
	if = { # Subtract 0.30 if raider society 
		limit = { var:global.exodus_new_owner = { has_idea = raider_society } }
		subtract_from_variable = { occupier_appeal = 0.30 }
	}
	if = { # Subtract 0.25 if slaver society 
		limit = { 
			var:global.exodus_new_owner = {
				OR = {
					has_idea = slaver_society
					has_country_flag = slavery_allowed
				}
			}
		}
		subtract_from_variable = { occupier_appeal = 0.25 }
	}
	## Mixed / Generic Factors
	# Add 1/2 stability
	set_temp_variable = { stab_impact = ROOT.exodus_new_owner:stability }
	divide_temp_variable = { stab_impact = global.core_stability_divide }
	add_to_temp_variable = { occupier_appeal_temp = stab_impact }
	# Add modifier from new occupier's ideas etc
	set_temp_variable = { var = occupier_appeal_temp_mod value = ROOT.exodus_new_owner:modifier@exodus_occupier_appeal }
	multiply_temp_variable = { occupier_appeal_temp_mod = global.occupier_modifier_factor }
	clamp_temp_variable = { var = occupier_appeal_temp_mod min = -1 max = 1 }
	add_to_temp_variable = { var = occupier_appeal_temp value = occupier_appeal_temp_mod }
	clamp_temp_variable = { var = occupier_appeal_temp min = 0.01 }
	#log = "[?occupier_appeal_temp]"
}

exodus_precalculate_input = { # Called in STATE SCOPE
	set_temp_variable = { refugee_proportion = global.core_refugee_base }
	#exodus_precalculate_occupier_appeal = yes
	divide_temp_variable = { refugee_proportion = occupier_appeal_temp }
	#exodus_precalculate_nomadicity = yes
	multiply_temp_variable = { refugee_proportion = nomadicity_temp }
	set_temp_variable = { exodus_state_refugees = state_population }
	multiply_temp_variable = { exodus_state_refugees = refugee_proportion }
	clamp_temp_variable = { var = exodus_state_refugees min = 0 }
	multiply_temp_variable = { refugee_proportion = global.core_building_elasticity }
	set_temp_variable = { exodus_arms_refugees = arms_factory_level }
	if = {
		limit = {
			check_variable = { exodus_arms_refugees = 0 }
		}
	}
	else = {
		multiply_temp_variable = { exodus_arms_refugees = refugee_proportion }
		subtract_from_temp_variable = { exodus_arms_refugees = 0.5 }
		round_temp_variable = exodus_arms_refugees
		clamp_temp_variable = { var = exodus_arms_refugees min = 0 }
	}
	set_temp_variable = { exodus_civ_refugees = industrial_complex_level }
	if = {
		limit = {
			check_variable = { exodus_civ_refugees = 0 }
		}
	}
	else = {
		multiply_temp_variable = { exodus_civ_refugees = refugee_proportion }
		subtract_from_temp_variable = { exodus_civ_refugees = 0.5 }
		round_temp_variable = exodus_civ_refugees
		clamp_temp_variable = { var = exodus_civ_refugees min = 0 }
	}
}

exodus_pre_weight_states = { # Called in STATE SCOPE
	set_temp_variable = { exodus_total_weighting_temp = 0 }
	all_of_scopes = {
		array = exodus_valid_targets_temp
		set_temp_variable = { exodus_national_appeal_temp = global.core_appeal }
		## Positive Factors
		if = { # 1.05 times if same ideology
			limit = { var:ROOT.exodus_old_owner = { has_government = PREV } }
			#if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: same ideology" }
			multiply_temp_variable = { exodus_national_appeal_temp = 1.05 }
		}
		if = { # 1.8 times if has core on taken state
			limit = { var:ROOT.exodus_target_state = { is_core_of = PREV } }
			#if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: shared core" }
			multiply_temp_variable = { exodus_national_appeal_temp = 1.8 }
		}
		## Negative Factors
		if = { # 0.85 if at war
			limit = { has_war = yes }
			#if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: has war" }
			multiply_temp_variable = { exodus_national_appeal_temp = 0.85 }
		}
		## Mixed / Generic Factors
		# Modifiers
		#if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: multiplicative weight factored in" }
		set_temp_variable = { exodus_national_appeal_modifier_temp = THIS:modifier@exodus_national_appeal }
		add_to_temp_variable = { exodus_national_appeal_modifier_temp = 1 } # Modifier is -1 to 1, this makes it 0 to 2
		multiply_temp_variable = { exodus_national_appeal_modifier_temp = global.appeal_modifier_factor }
		clamp_temp_variable = { var = exodus_national_appeal_modifier_temp min = 0 max = 2 }
		multiply_temp_variable = { exodus_national_appeal_temp = exodus_national_appeal_modifier_temp }
		# Distance
		var:global.exodus_old_owner = {
			PREV = {
				var:closest_state_to@PREV = {
					set_temp_variable = { exodus_distance = THIS.distance_to@global.exodus_target_state }
					if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: calculated distance from [global.exodus_target_state.GetName] to [PREV.GetName]'s capital' of [?exodus_distance]" }
					divide_temp_variable = { exodus_distance = global.core_distance_divisor }
					divide_temp_variable = { PREV.exodus_national_appeal = exodus_distance }
				}
			}
		}
		clamp_temp_variable = { var = exodus_national_appeal_temp min = 0 }
		#if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: FINAL WEIGHT OF [?THIS} - [?exodus_national_appeal]" }
		add_to_temp_variable = { exodus_total_weighting_temp = exodus_national_appeal_temp }
		add_to_temp_array = {
			array = current_scope_weight
			value = exodus_national_appeal_temp
		}
	}
	#if = { limit = { has_global_flag = exodus_debug } log = "EXODUS - weight_states: CALCULATION COMPLETE" }
}

insertion_sort_exodus = {
    all_of = {
        array = current_scope_weight
        set_temp_variable = { j = i }
        subtract_from_temp_variable = { j = 1 }
        all_of = {
			array = current_scope_weight
			if = {
				limit = {
					check_variable = {
						var = j
						value = 0
						compare = greater_than_or_equals
					}
					check_variable = {
						var = v
						value = current_scope_weight^j
						compare = less_than
					}
				}
				set_temp_variable = { j_plus_1 = j }
				add_to_temp_variable = { j_plus_1 = 1 }
				set_temp_variable = { current_scope_weight^j_plus_1 = current_scope_weight^j }
				set_temp_variable = { exodus_valid_targets_temp^j_plus_1 = exodus_valid_targets_temp^j }
				subtract_from_temp_variable = { j = 1 }
			}
			else = {
				set_temp_variable = { break = 1 }
			}
        }
        set_temp_variable = { j_plus_1 = j }
        add_to_temp_variable = { j_plus_1 = 1 }
		set_temp_variable = { current_scope_weight^j_plus_1 = v }
		set_temp_variable = { exodus_valid_targets_temp^j_plus_1 = exodus_valid_targets_temp^j }
    }
}
