@MAX_INT = 2147483
@BASE_COST = 25
@STATE_POP_DIVISOR = 0.15
@CORED_POP_DIVISOR = 1
@DISTANCE_DIVISOR = 5
@CLAIM_MULTIPLIER = 0.75

scripted_gui = {
	add_core = {
		context_type = selected_state_context

		window_name = "add_core_container"
		parent_window_token = selected_state_view

		visible = {
			NOT = { is_core_of = ROOT }
			ROOT = {
				NOT = { has_country_flag = coring_button_hidden }
			}
		}

		effects = {
			add_core_click = {
				# States population.
				set_temp_variable = { coring_var_state_pop = state_population_k }
				# ROOT's cored population.
				set_temp_variable = { coring_var_cored_pop = 0 }
				ROOT = {
					every_owned_state = {
						limit = { is_core_of = ROOT }
						add_to_temp_variable = { coring_var_cored_pop = state_population_k }
					}
				}
				# If coring_var_cored_pop overflows assign max int value to it.
				if = {
					limit = { check_variable = { coring_var_cored_pop < 0 } }
					set_temp_variable = { coring_var_cored_pop = @MAX_INT }
				}

				# Distance from ROOT's capital.
				set_temp_variable = { coring_var_distance = 0 }
				capital_scope = {
					set_temp_variable = { coring_var_distance = THIS.distance_to@PREV }
				}

				if = {
					limit = { has_global_flag = debug_coring_gui }
					set_temp_variable = { BASE_COST = @BASE_COST }
					set_temp_variable = { STATE_POP_DIVISOR = @STATE_POP_DIVISOR }
					set_temp_variable = { CORED_POP_DIVISOR = @CORED_POP_DIVISOR }
					set_temp_variable = { DISTANCE_DIVISOR = @DISTANCE_DIVISOR }
					log = "([GetDateText]) \"[Root.GetName]\" is coring \"[This.GetName]\""
					log = "([GetDateText]) base_value: [?BASE_COST], state_pop:[?coring_var_state_pop]/[?STATE_POP_DIVISOR], cored_pop:[?coring_var_cored_pop]/[?CORED_POP_DIVISOR], dist:[?coring_var_distance]/[?DISTANCE_DIVISOR]"
				}

				# Cost divisors.
				divide_temp_variable = { coring_var_state_pop = @STATE_POP_DIVISOR }
				divide_temp_variable = { coring_var_cored_pop = @CORED_POP_DIVISOR }
				divide_temp_variable = { coring_var_distance = @DISTANCE_DIVISOR }

				# Round floats into integers.
				round_temp_variable = coring_var_state_pop
				round_temp_variable = coring_var_cored_pop
				round_temp_variable = coring_var_distance

				# Sum up the coring cost values.
				set_temp_variable = { coring_var_coring_cost = @BASE_COST } # Base value
				add_to_temp_variable = { coring_var_coring_cost = coring_var_state_pop }
				add_to_temp_variable = { coring_var_coring_cost = coring_var_cored_pop }
				add_to_temp_variable = { coring_var_coring_cost = coring_var_distance }

				# Claim multiplier.
				if = {
					limit = { is_claimed_by = ROOT }
					set_temp_variable = { coring_var_claim = @CLAIM_MULTIPLIER }
					multiply_temp_variable = { coring_var_coring_cost = coring_var_claim }
					round_temp_variable = coring_var_coring_cost
				}

				# Limit the cost to 0-2000 range.
				if = {
					limit = { check_variable = { coring_var_coring_cost < 0 } }
					set_temp_variable = { coring_var_coring_cost = 0 }
				} else_if = {
					limit = { check_variable = { coring_var_coring_cost > 2000 } }
					set_temp_variable = { coring_var_coring_cost = 2000 }
				}

				set_temp_variable = { coring_var_coring_cost_negative = coring_var_coring_cost }
				subtract_from_temp_variable = { coring_var_coring_cost_negative = coring_var_coring_cost }
				subtract_from_temp_variable = { coring_var_coring_cost_negative = coring_var_coring_cost }

				ROOT = {
					add_political_power = coring_var_coring_cost_negative
				}
				add_core_of = ROOT

				if = {
					limit = { has_global_flag = debug_coring_gui }
					log = "([GetDateText]) Cored for [?coring_var_coring_cost] PP (state_pop:[?coring_var_state_pop] + total_pop:[?coring_var_cored_pop] + dist:[?coring_var_distance])"
				}
			}
			add_core_tlaloc_click = {
				set_temp_variable = { coring_var_energy_cost = 10 }
				# Additional cost from coring, so you core a state and "lose" the amount of energy that you paid
				add_to_temp_variable = { coring_var_energy_cost = ROOT.coring_var_energy_cost_from_coring }

				ROOT = {
					add_to_variable = { coring_var_energy_cost_from_coring = coring_var_energy_cost }
				}
				add_core_of = ROOT
			}
		}

		triggers = {
			add_core_visible = {
				ROOT = {
					NOT = {
						OR = {
							tag = TLA
							tag = ARM
							tag = MAX
							tag = MOC
							tag = ZAP
						}
					}
				}
			}
			add_core_click_enabled = {
				is_owned_and_controlled_by = ROOT

				ROOT = {
					has_civil_war = no
					NOT = { has_country_flag = not_allowed_to_core_flag }
				}

				OR = {
					any_neighbor_state = { is_core_of = ROOT }
					AND = {
						custom_trigger_tooltip = {
							tooltip = tt_is_not_in_home_area
							NOT = { is_in_home_area = yes }
						}
						is_coastal = yes
					}
				}

				hidden_trigger = {
					# States population.
					set_temp_variable = { coring_var_state_pop = state_population_k }

					# Cored ROOT's population.
					# The code is insane, because it does not work properly in triggers otherwise or spams log with errors when it works.
					ROOT = {
						set_temp_variable = { workaround_var = 0 }
					}

					ROOT = {
						all_owned_state = {
							OR = { # Has to use this instead of IF to get rid of the wrong scope error.
								NOT = { is_core_of = ROOT }
								AND = {
									is_core_of = ROOT
									ROOT = { add_to_temp_variable = { workaround_var = PREV.state_population_k } }
								}
							}
						}
						set_temp_variable = { PREV.coring_var_cored_pop = workaround_var }
					}

					# # If coring_var_cored_pop overflows assign max int value to it.
					if = {
						limit = { check_variable = { coring_var_cored_pop < 0 } }
						set_temp_variable = { coring_var_cored_pop = @MAX_INT }
					}

					# Distance from ROOT's capital.
					set_temp_variable = { coring_var_distance = 0 }
					capital_scope = {
						set_temp_variable = { coring_var_distance = THIS.distance_to@PREV }
					}

					# Cost multipliers.
					divide_temp_variable = { coring_var_state_pop = @STATE_POP_DIVISOR }
					divide_temp_variable = { coring_var_cored_pop = @CORED_POP_DIVISOR }
					divide_temp_variable = { coring_var_distance = @DISTANCE_DIVISOR }

					# Round floats into integers.
					round_temp_variable = coring_var_state_pop
					round_temp_variable = coring_var_cored_pop
					round_temp_variable = coring_var_distance

					# Sum up the coring cost values.
					set_temp_variable = { BASE_COST = @BASE_COST } # Create variable to show in the tooltip.
					set_temp_variable = { coring_var_coring_cost = @BASE_COST } # Base value
					add_to_temp_variable = { coring_var_coring_cost = coring_var_state_pop }
					add_to_temp_variable = { coring_var_coring_cost = coring_var_cored_pop }
					add_to_temp_variable = { coring_var_coring_cost = coring_var_distance }

					# Claim multiplier.
					set_temp_variable = { coring_var_claim = 1 }
					if = {
						limit = { is_claimed_by = ROOT }
						set_temp_variable = { coring_var_claim = @CLAIM_MULTIPLIER }
						multiply_temp_variable = { coring_var_coring_cost = coring_var_claim }
						round_temp_variable = coring_var_coring_cost
					}

					# Limit the cost to 0-2000 range.
					if = {
						limit = { check_variable = { coring_var_coring_cost < 0 } }
						set_temp_variable = { coring_var_coring_cost = 0 }
					} else_if = {
						limit = { check_variable = { coring_var_coring_cost > 2000 } }
						set_temp_variable = { coring_var_coring_cost = 2000 }
					}

					check_variable = {
						var = ROOT.political_power
						value = coring_var_coring_cost
						compare = greater_than_or_equals
					}
				}
			}
			add_core_tlaloc_visible = {
				ROOT = {
					OR = {
						#tag = TLA
						tag = ARM
						tag = MAX
						tag = MOC
						tag = ZAP
					}
				}
			}
			add_core_tlaloc_click_enabled = {
				is_owned_and_controlled_by = ROOT
				ROOT = {
					has_civil_war = no
					NOT = { has_country_flag = not_allowed_to_core_flag }
				}
				OR = {
					any_neighbor_state = { is_core_of = ROOT }
					AND = {
						custom_trigger_tooltip = {
							tooltip = tt_is_not_in_home_area
							NOT = { is_in_home_area = yes }
						}
						is_coastal = yes
					}
				}
				hidden_trigger = {
					set_temp_variable = { coring_var_energy_cost = 10 }
					# Additional cost from coring, so you core a state and "lose" the amount of energy that you paid
					add_to_temp_variable = { coring_var_energy_cost = ROOT.coring_var_energy_cost_from_coring }

					set_temp_variable = { free_energy_for_coring = ROOT.resource_produced@energy }
					subtract_from_temp_variable = { free_energy_for_coring = ROOT.resource_exported@energy }
					subtract_from_temp_variable = { free_energy_for_coring = ROOT.resource_consumed@energy }
					subtract_from_temp_variable = { free_energy_for_coring = ROOT.coring_var_energy_cost }
				}
				custom_trigger_tooltip = {
					tooltip = HAS_ENOUGH_ENERGY_TO_CORE_STATE
					NOT = { check_variable = { coring_var_energy_cost > free_energy_for_coring } }
				}
			}
		}

		ai_test_interval = 336
		ai_test_variance = 0.2
		ai_max_weight_taken_per_test = 1
		# intializes at beginning of game, optimization
		ai_enabled = {
			NOT = { has_country_flag = not_allowed_to_core_flag }
		}
		# only test for our owned states
		ai_test_scopes = test_self_owned_states

		ai_check = {
			has_civil_war = no
			check_variable = { ai_random > 0.5 }
		}

		ai_check_scope = {
			NOT = { is_core_of = ROOT }
			is_owned_and_controlled_by = ROOT

			OR = {
				any_neighbor_state = { is_core_of = ROOT }
				AND = {
					NOT = { is_in_home_area = yes }
					is_coastal = yes
				}
			}
		}

		ai_weights = {
			add_core_click = {
				ai_will_do = {
					factor = 1
				}
			}
			add_core_tlaloc_click = {
				ai_will_do = {
					factor = 1
				}
			}
		}
	}

	fallout_coring_tab_window = {
		context_type = player_context

		window_name = "fallout_coring_tab_window"

		visible = {
			check_variable = { show_fallout_coring_tab_window > 0 }
		}

		effects = {
			close_button_click = {
				clear_variable = show_fallout_coring_tab_window
			}

			entry_bg_button_click = {
				ROOT = {
					goto_state = PREV
				}
			}
			add_core_click = {
				# States population.
				set_temp_variable = { coring_var_state_pop = state_population_k }
				# ROOT's cored population.
				set_temp_variable = { coring_var_cored_pop = 0 }
				ROOT = {
					every_owned_state = {
						limit = { is_core_of = ROOT }
						add_to_temp_variable = { coring_var_cored_pop = state_population_k }
					}
				}
				# If coring_var_cored_pop overflows assign max int value to it.
				if = {
					limit = { check_variable = { coring_var_cored_pop < 0 } }
					set_temp_variable = { coring_var_cored_pop = @MAX_INT }
				}

				# Distance from ROOT's capital.
				set_temp_variable = { coring_var_distance = 0 }
				capital_scope = {
					set_temp_variable = { coring_var_distance = THIS.distance_to@PREV }
				}

				if = {
					limit = { has_global_flag = debug_coring_gui }
					set_temp_variable = { BASE_COST = @BASE_COST }
					set_temp_variable = { STATE_POP_DIVISOR = @STATE_POP_DIVISOR }
					set_temp_variable = { CORED_POP_DIVISOR = @CORED_POP_DIVISOR }
					set_temp_variable = { DISTANCE_DIVISOR = @DISTANCE_DIVISOR }
					log = "([GetDateText]) \"[Root.GetName]\" is coring \"[This.GetName]\""
					log = "([GetDateText]) base_value: [?BASE_COST], state_pop:[?coring_var_state_pop]/[?STATE_POP_DIVISOR], cored_pop:[?coring_var_cored_pop]/[?CORED_POP_DIVISOR], dist:[?coring_var_distance]/[?DISTANCE_DIVISOR]"
				}

				# Cost divisors.
				divide_temp_variable = { coring_var_state_pop = @STATE_POP_DIVISOR }
				divide_temp_variable = { coring_var_cored_pop = @CORED_POP_DIVISOR }
				divide_temp_variable = { coring_var_distance = @DISTANCE_DIVISOR }

				# Round floats into integers.
				round_temp_variable = coring_var_state_pop
				round_temp_variable = coring_var_cored_pop
				round_temp_variable = coring_var_distance

				# Sum up the coring cost values.
				set_temp_variable = { coring_var_coring_cost = @BASE_COST } # Base value
				add_to_temp_variable = { coring_var_coring_cost = coring_var_state_pop }
				add_to_temp_variable = { coring_var_coring_cost = coring_var_cored_pop }
				add_to_temp_variable = { coring_var_coring_cost = coring_var_distance }

				# Claim multiplier.
				if = {
					limit = { is_claimed_by = ROOT }
					set_temp_variable = { coring_var_claim = @CLAIM_MULTIPLIER }
					multiply_temp_variable = { coring_var_coring_cost = coring_var_claim }
					round_temp_variable = coring_var_coring_cost
				}

				# Limit the cost to 0-2000 range.
				if = {
					limit = { check_variable = { coring_var_coring_cost < 0 } }
					set_temp_variable = { coring_var_coring_cost = 0 }
				} else_if = {
					limit = { check_variable = { coring_var_coring_cost > 2000 } }
					set_temp_variable = { coring_var_coring_cost = 2000 }
				}

				set_temp_variable = { coring_var_coring_cost_negative = coring_var_coring_cost }
				subtract_from_temp_variable = { coring_var_coring_cost_negative = coring_var_coring_cost }
				subtract_from_temp_variable = { coring_var_coring_cost_negative = coring_var_coring_cost }

				ROOT = {
					add_political_power = coring_var_coring_cost_negative
				}
				add_core_of = ROOT
				remove_from_array = { ROOT.uncored_states_array = THIS.id }

				if = {
					limit = { has_global_flag = debug_coring_gui }
					log = "([GetDateText]) Cored for [?coring_var_coring_cost] PP (state_pop:[?coring_var_state_pop] + total_pop:[?coring_var_cored_pop] + dist:[?coring_var_distance])"
				}
			}
			add_core_tlaloc_click = {
				set_temp_variable = { coring_var_energy_cost = 10 }
				# Additional cost from coring, so you core a state and "lose" the amount of energy that you paid
				add_to_temp_variable = { coring_var_energy_cost = ROOT.coring_var_energy_cost_from_coring }

				ROOT = {
					add_to_variable = { coring_var_energy_cost_from_coring = coring_var_energy_cost }
				}
				add_core_of = ROOT
				remove_from_array = { ROOT.uncored_states_array = THIS.id }
			}
		}

		triggers = {
			no_uncored_states_info_visible = {
				check_variable = { uncored_states_array^num < 1 }
			}

			add_core_visible = {
				NOT = { is_core_of = ROOT }
				ROOT = {
					NOT = {
						OR = {
							tag = TLA
							tag = ARM
							tag = MAX
							tag = MOC
							tag = ZAP
						}
					}
				}
			}
			add_core_click_enabled = {
				is_owned_and_controlled_by = ROOT

				ROOT = {
					has_civil_war = no
					NOT = { has_country_flag = not_allowed_to_core_flag }
				}

				OR = {
					any_neighbor_state = { is_core_of = ROOT }
					AND = {
						custom_trigger_tooltip = {
							tooltip = tt_is_not_in_home_area
							NOT = { is_in_home_area = yes }
						}
						is_coastal = yes
					}
				}

				hidden_trigger = {
					# States population.
					set_temp_variable = { coring_var_state_pop = state_population_k }

					# Cored ROOT's population.
					# The code is insane, because it does not work properly in triggers otherwise or spams log with errors when it works.
					ROOT = {
						set_temp_variable = { workaround_var = 0 }
					}

					ROOT = {
						all_owned_state = {
							OR = { # Has to use this instead of IF to get rid of the wrong scope error.
								NOT = { is_core_of = ROOT }
								AND = {
									is_core_of = ROOT
									ROOT = { add_to_temp_variable = { workaround_var = PREV.state_population_k } }
								}
							}
						}
						set_temp_variable = { PREV.coring_var_cored_pop = workaround_var }
					}

					# # If coring_var_cored_pop overflows assign max int value to it.
					if = {
						limit = { check_variable = { coring_var_cored_pop < 0 } }
						set_temp_variable = { coring_var_cored_pop = @MAX_INT }
					}

					# Distance from ROOT's capital.
					set_temp_variable = { coring_var_distance = 0 }
					capital_scope = {
						set_temp_variable = { coring_var_distance = THIS.distance_to@PREV }
					}

					# Cost multipliers.
					divide_temp_variable = { coring_var_state_pop = @STATE_POP_DIVISOR }
					divide_temp_variable = { coring_var_cored_pop = @CORED_POP_DIVISOR }
					divide_temp_variable = { coring_var_distance = @DISTANCE_DIVISOR }

					# Round floats into integers.
					round_temp_variable = coring_var_state_pop
					round_temp_variable = coring_var_cored_pop
					round_temp_variable = coring_var_distance

					# Sum up the coring cost values.
					set_temp_variable = { BASE_COST = @BASE_COST } # Create variable to show in the tooltip.
					set_temp_variable = { coring_var_coring_cost = @BASE_COST } # Base value
					add_to_temp_variable = { coring_var_coring_cost = coring_var_state_pop }
					add_to_temp_variable = { coring_var_coring_cost = coring_var_cored_pop }
					add_to_temp_variable = { coring_var_coring_cost = coring_var_distance }

					# Claim multiplier.
					set_temp_variable = { coring_var_claim = 1 }
					if = {
						limit = { is_claimed_by = ROOT }
						set_temp_variable = { coring_var_claim = @CLAIM_MULTIPLIER }
						multiply_temp_variable = { coring_var_coring_cost = coring_var_claim }
						round_temp_variable = coring_var_coring_cost
					}

					# Limit the cost to 0-2000 range.
					if = {
						limit = { check_variable = { coring_var_coring_cost < 0 } }
						set_temp_variable = { coring_var_coring_cost = 0 }
					} else_if = {
						limit = { check_variable = { coring_var_coring_cost > 2000 } }
						set_temp_variable = { coring_var_coring_cost = 2000 }
					}

					check_variable = {
						var = ROOT.political_power
						value = coring_var_coring_cost
						compare = greater_than_or_equals
					}
				}
			}
			add_core_tlaloc_visible = {
				NOT = { is_core_of = ROOT }
				ROOT = {
					OR = {
						tag = TLA
						tag = ARM
						tag = MAX
						tag = MOC
						tag = ZAP
					}
				}
			}
			add_core_tlaloc_click_enabled = {
				is_owned_and_controlled_by = ROOT
				ROOT = {
					has_civil_war = no
					NOT = { has_country_flag = not_allowed_to_core_flag }
				}
				OR = {
					any_neighbor_state = { is_core_of = ROOT }
					AND = {
						custom_trigger_tooltip = {
							tooltip = tt_is_not_in_home_area
							NOT = { is_in_home_area = yes }
						}
						is_coastal = yes
					}
				}
				hidden_trigger = {
					set_temp_variable = { coring_var_energy_cost = 10 }
					# Additional cost from coring, so you core a state and "lose" the amount of energy that you paid
					add_to_temp_variable = { coring_var_energy_cost = ROOT.coring_var_energy_cost_from_coring }

					set_temp_variable = { free_energy_for_coring = ROOT.resource_produced@energy }
					subtract_from_temp_variable = { free_energy_for_coring = ROOT.resource_exported@energy }
					subtract_from_temp_variable = { free_energy_for_coring = ROOT.resource_consumed@energy }
					subtract_from_temp_variable = { free_energy_for_coring = ROOT.coring_var_energy_cost }
				}
				custom_trigger_tooltip = {
					tooltip = HAS_ENOUGH_ENERGY_TO_CORE_STATE
					NOT = { check_variable = { coring_var_energy_cost > free_energy_for_coring } }
				}
			}
		}

		dynamic_lists = {
			fallout_uncored_states_gridbox = {
				array = uncored_states_array
				entry_container = fallout_uncored_states_entry
				change_scope = yes
			}
		}
	}
}
